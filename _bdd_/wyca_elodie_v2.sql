-- phpMyAdmin SQL Dump
-- version 4.8.3
-- https://www.phpmyadmin.net/
--
-- Hôte : 127.0.0.1:3306
-- Généré le :  jeu. 02 avr. 2020 à 09:08
-- Version du serveur :  5.7.23
-- Version de PHP :  5.6.38

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données :  `wyca_elodie`
--

-- --------------------------------------------------------

--
-- Structure de la table `area`
--

DROP TABLE IF EXISTS `area`;
CREATE TABLE IF NOT EXISTS `area` (
  `id_area` int(11) NOT NULL AUTO_INCREMENT,
  `id_map` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `comment` text NOT NULL,
  `color_r` int(3) NOT NULL,
  `color_g` int(3) NOT NULL,
  `color_b` int(3) NOT NULL,
  `is_forbidden` tinyint(1) NOT NULL DEFAULT '0',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  `from_install` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id_area`),
  KEY `id_plan` (`id_map`),
  KEY `is_forbidden` (`is_forbidden`),
  KEY `from_install` (`from_install`),
  KEY `deleted` (`deleted`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `area_config`
--

DROP TABLE IF EXISTS `area_config`;
CREATE TABLE IF NOT EXISTS `area_config` (
  `id_area_config` int(11) NOT NULL AUTO_INCREMENT,
  `id_area` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `value` text NOT NULL,
  PRIMARY KEY (`id_area_config`),
  KEY `id_area` (`id_area`),
  KEY `name` (`name`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `area_point`
--

DROP TABLE IF EXISTS `area_point`;
CREATE TABLE IF NOT EXISTS `area_point` (
  `id_area_point` int(11) NOT NULL AUTO_INCREMENT,
  `id_area` int(11) NOT NULL,
  `x` decimal(10,6) NOT NULL,
  `y` decimal(10,6) NOT NULL,
  PRIMARY KEY (`id_area_point`),
  KEY `id_poly` (`id_area`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `configuration`
--

DROP TABLE IF EXISTS `configuration`;
CREATE TABLE IF NOT EXISTS `configuration` (
  `id_configuration` int(10) NOT NULL AUTO_INCREMENT,
  `nom` varchar(255) NOT NULL,
  `description` varchar(255) NOT NULL,
  `valeur` varchar(255) NOT NULL,
  PRIMARY KEY (`id_configuration`),
  KEY `nom` (`nom`)
) ENGINE=MyISAM AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `configuration`
--

INSERT INTO `configuration` (`id_configuration`, `nom`, `description`, `valeur`) VALUES
(3, 'CURRENT_SITE', '', '1'),
(4, 'CURRENT_MAP', '', '5'),
(5, 'level_min_gotodock', '', '10'),
(6, 'level_min_dotask', '', '53'),
(7, 'level_min_gotodock_aftertask', '', '50'),
(8, 'LAST_UPDATE', '', '202002061300.php'),
(10, 'INSTALL_STEP', '', '8'),
(9, 'ID_LANG', '', '2');

-- --------------------------------------------------------

--
-- Structure de la table `docking_station`
--

DROP TABLE IF EXISTS `docking_station`;
CREATE TABLE IF NOT EXISTS `docking_station` (
  `id_docking_station` int(11) NOT NULL AUTO_INCREMENT,
  `id_map` int(11) NOT NULL,
  `id_reflector` int(10) NOT NULL,
  `x_ros` decimal(8,4) NOT NULL,
  `y_ros` decimal(8,4) NOT NULL,
  `t_ros` decimal(8,4) NOT NULL,
  `num` int(3) NOT NULL,
  `name` varchar(255) NOT NULL,
  `comment` int(11) NOT NULL,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id_docking_station`),
  KEY `id_plan` (`id_map`),
  KEY `active` (`active`),
  KEY `num` (`num`),
  KEY `id_reflector` (`id_reflector`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `email_send`
--

DROP TABLE IF EXISTS `email_send`;
CREATE TABLE IF NOT EXISTS `email_send` (
  `id_email` int(10) NOT NULL AUTO_INCREMENT,
  `sended` tinyint(1) NOT NULL DEFAULT '0',
  `destinataire` varchar(255) NOT NULL,
  `sujet` text NOT NULL,
  `message` text NOT NULL,
  PRIMARY KEY (`id_email`),
  KEY `sended` (`sended`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `groupe_user`
--

DROP TABLE IF EXISTS `groupe_user`;
CREATE TABLE IF NOT EXISTS `groupe_user` (
  `id_groupe_user` int(10) NOT NULL AUTO_INCREMENT,
  `nom` varchar(50) NOT NULL,
  PRIMARY KEY (`id_groupe_user`)
) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `groupe_user`
--

INSERT INTO `groupe_user` (`id_groupe_user`, `nom`) VALUES
(1, 'Wyca'),
(2, 'Distributor'),
(3, 'Manager'),
(6, 'User');

-- --------------------------------------------------------

--
-- Structure de la table `ip_blocked`
--

DROP TABLE IF EXISTS `ip_blocked`;
CREATE TABLE IF NOT EXISTS `ip_blocked` (
  `IP` varchar(45) NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`IP`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `ip_error_trace`
--

DROP TABLE IF EXISTS `ip_error_trace`;
CREATE TABLE IF NOT EXISTS `ip_error_trace` (
  `id_ip_error_trace` int(10) NOT NULL AUTO_INCREMENT,
  `type` enum('Connect','404') NOT NULL,
  `date` datetime NOT NULL,
  `IP` varchar(45) NOT NULL,
  PRIMARY KEY (`id_ip_error_trace`),
  KEY `type` (`type`),
  KEY `date` (`date`),
  KEY `IP` (`IP`)
) ENGINE=MyISAM AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `lang`
--

DROP TABLE IF EXISTS `lang`;
CREATE TABLE IF NOT EXISTS `lang` (
  `id_lang` int(2) NOT NULL AUTO_INCREMENT,
  `iso` varchar(2) NOT NULL,
  `langue` varchar(20) NOT NULL,
  PRIMARY KEY (`id_lang`),
  KEY `iso` (`iso`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `lang`
--

INSERT INTO `lang` (`id_lang`, `iso`, `langue`) VALUES
(1, 'fr', 'Fran&ccedil;ais'),
(2, 'en', 'English');

-- --------------------------------------------------------

--
-- Structure de la table `log_ros`
--

DROP TABLE IF EXISTS `log_ros`;
CREATE TABLE IF NOT EXISTS `log_ros` (
  `id_log_ros` int(11) NOT NULL AUTO_INCREMENT,
  `level` varchar(50) NOT NULL,
  `type` varchar(255) NOT NULL,
  `detail` text NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`id_log_ros`),
  KEY `level` (`level`),
  KEY `type` (`type`),
  KEY `date` (`date`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `log_system`
--

DROP TABLE IF EXISTS `log_system`;
CREATE TABLE IF NOT EXISTS `log_system` (
  `id_log_system` int(11) NOT NULL AUTO_INCREMENT,
  `level` varchar(50) NOT NULL,
  `type` varchar(255) NOT NULL,
  `detail` text NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`id_log_system`) USING BTREE,
  KEY `level` (`level`),
  KEY `type` (`type`),
  KEY `date` (`date`)
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `log_system`
--

INSERT INTO `log_system` (`id_log_system`, `level`, `type`, `detail`, `date`) VALUES
(8, 'MEDIUM', 'Connection', 'IP 127.0.0.1 connection error with Distributor login', '2020-03-17 08:31:04');

-- --------------------------------------------------------

--
-- Structure de la table `log_task`
--

DROP TABLE IF EXISTS `log_task`;
CREATE TABLE IF NOT EXISTS `log_task` (
  `id_log_task` int(11) NOT NULL AUTO_INCREMENT,
  `level` varchar(50) NOT NULL,
  `type` varchar(255) NOT NULL,
  `detail` text NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`id_log_task`),
  KEY `level` (`level`),
  KEY `type` (`type`),
  KEY `date` (`date`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `map`
--

DROP TABLE IF EXISTS `map`;
CREATE TABLE IF NOT EXISTS `map` (
  `id_map` int(11) NOT NULL AUTO_INCREMENT,
  `id_site` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `comment` text NOT NULL,
  `image` text NOT NULL,
  `image_tri` text NOT NULL,
  `ros_resolution` int(3) NOT NULL,
  `ros_width` int(6) NOT NULL,
  `ros_height` int(6) NOT NULL,
  `threshold_free` int(3) NOT NULL,
  `threshold_occupied` int(3) NOT NULL,
  PRIMARY KEY (`id_map`),
  KEY `id_robot` (`id_site`) USING BTREE
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `map`
--

INSERT INTO `map` (`id_map`, `id_site`, `name`, `comment`, `image`, `image_tri`, `ros_resolution`, `ros_width`, `ros_height`, `threshold_free`, `threshold_occupied`) VALUES
(1, 1, '', '', '', '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', 5, -1, -1, 25, 65);
INSERT INTO `map` (`id_map`, `id_site`, `name`, `comment`, `image`, `image_tri`, `ros_resolution`, `ros_width`, `ros_height`, `threshold_free`, `threshold_occupied`) VALUES
(2, 1, '', '', '', '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', 5, -1, -1, 25, 65);
INSERT INTO `map` (`id_map`, `id_site`, `name`, `comment`, `image`, `image_tri`, `ros_resolution`, `ros_width`, `ros_height`, `threshold_free`, `threshold_occupied`) VALUES
(3, 1, '', '', '', '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', 5, -1, -1, 25, 65);
INSERT INTO `map` (`id_map`, `id_site`, `name`, `comment`, `image`, `image_tri`, `ros_resolution`, `ros_width`, `ros_height`, `threshold_free`, `threshold_occupied`) VALUES
(4, 1, '', '', '', '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', 5, -1, -1, 25, 65);
INSERT INTO `map` (`id_map`, `id_site`, `name`, `comment`, `image`, `image_tri`, `ros_resolution`, `ros_width`, `ros_height`, `threshold_free`, `threshold_occupied`) VALUES
(5, 1, '', '', '', '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', 5, 356, 340, 25, 65);

-- --------------------------------------------------------

--
-- Structure de la table `poi`
--

DROP TABLE IF EXISTS `poi`;
CREATE TABLE IF NOT EXISTS `poi` (
  `id_poi` int(10) NOT NULL AUTO_INCREMENT,
  `id_map` int(11) NOT NULL,
  `id_reflector` int(10) NOT NULL,
  `x_ros` decimal(8,4) NOT NULL,
  `y_ros` decimal(8,4) NOT NULL,
  `t_ros` decimal(8,4) NOT NULL,
  `name` varchar(255) NOT NULL,
  `comment` text NOT NULL,
  `icon` varchar(255) NOT NULL,
  `advanced` tinyint(1) NOT NULL DEFAULT '0',
  `active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id_poi`),
  KEY `id_map` (`id_map`),
  KEY `advanced` (`advanced`),
  KEY `active` (`active`),
  KEY `id_reflector` (`id_reflector`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `robot_config`
--

DROP TABLE IF EXISTS `robot_config`;
CREATE TABLE IF NOT EXISTS `robot_config` (
  `id_robot_config` int(10) NOT NULL AUTO_INCREMENT,
  `id_site` int(10) NOT NULL,
  `date` datetime NOT NULL,
  `modifications` text NOT NULL,
  `update_by` enum('Server','Robot') NOT NULL DEFAULT 'Server',
  PRIMARY KEY (`id_robot_config`),
  KEY `id_robot` (`id_site`),
  KEY `date` (`date`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `robot_config`
--

INSERT INTO `robot_config` (`id_robot_config`, `id_site`, `date`, `modifications`, `update_by`) VALUES
(1, 1, '2019-12-09 00:00:00', '', 'Server'),
(4, 1, '2020-03-09 14:04:36', 'Update map data', 'Server');

-- --------------------------------------------------------

--
-- Structure de la table `robot_config_value`
--

DROP TABLE IF EXISTS `robot_config_value`;
CREATE TABLE IF NOT EXISTS `robot_config_value` (
  `id_robot_config_value` int(10) NOT NULL AUTO_INCREMENT,
  `id_robot_config` int(10) NOT NULL,
  `directory` varchar(255) NOT NULL,
  `file` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `data` text NOT NULL,
  `is_file` tinyint(1) NOT NULL DEFAULT '0',
  `date_upd_robot` datetime NOT NULL,
  `date_upd_server` datetime NOT NULL,
  PRIMARY KEY (`id_robot_config_value`),
  KEY `id_robot_config` (`id_robot_config`),
  KEY `dir` (`directory`),
  KEY `file` (`file`),
  KEY `is_file` (`is_file`),
  KEY `date_upd_robot` (`date_upd_robot`),
  KEY `date_upd_server` (`date_upd_server`)
) ENGINE=MyISAM AUTO_INCREMENT=2749 DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `robot_config_value`
--

INSERT INTO `robot_config_value` (`id_robot_config_value`, `id_robot_config`, `directory`, `file`, `name`, `data`, `is_file`, `date_upd_robot`, `date_upd_server`) VALUES
(1, 1, '/auth', 'interface_urls.yaml', '', 'page_list: \"https://traxdev.wyca-solutions.com/robot_hmi/mapping/robot.php?id_robot=1&code=rXy5Q9LFbjdzVx7E2rbg\"', 0, '0000-00-00 00:00:00', '2019-08-13 08:08:53'),
(2, 1, '/auth', 'port.yaml', '', 'port: 9090', 0, '0000-00-00 00:00:00', '2019-08-13 08:09:03'),
(3, 1, '/auth', 'valid.secret', '', 'zSk81+WIgWIfbl|O', 0, '0000-00-00 00:00:00', '2019-08-13 08:09:12'),
(4, 1, '/collision_velocity_filter', 'collision_velocity_filter_params.yaml', '', 'footprint_update_frequency: 0.1\r\npot_ctrl_vmax: 0.4\r\npot_ctrl_vtheta_max: 0.4\r\npot_ctrl_kv: 1.0\r\npot_ctrl_kp: 2.0\r\npot_ctrl_virt_mass: 0.8\r\ninfluence_radius: 2.0\r\nobstacle_damping_dist: 1.5\r\nstop_threshold: 0.0\r\nuse_circumscribed_threshold: 0.2\r\ncostmap_obstacle_treshold: 100\r\nis_robot_circular: true\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:13:04'),
(5, 1, '/collision_velocity_filter', 'local_costmap_params.yaml', '', 'local_costmap:\r\n  global_frame: odom\r\n  robot_base_frame: base_link\r\n  update_frequency: 20.0\r\n  publish_frequency: 20.0\r\n  static_map: false\r\n  rolling_window: true\r\n  width: 5.5\r\n  height: 5.5\r\n  resolution: 0.05\r\n  transform_tolerance: 0.5\r\n  \r\n  plugins:\r\n   - {name: static_layer,        type: \"costmap_2d::StaticLayer\"}\r\n   - {name: obstacle_layer,      type: \"costmap_2d::ObstacleLayer\"}\r\n   - {name: sonar_layer,      type: \"range_sensor_layer::RangeSensorLayer\"}\r\n   - {name: inflation_layer,         type: \"costmap_2d::InflationLayer\"}\r\n\r\n\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(6, 1, '/docking', 'odom_simple_goal.yaml', '', '# config.yaml\r\n\r\nparameters:\r\n control_loop_freq: 20\r\n control_linear_P_gain: 1.0\r\n control_angular_P_gain: 2.0\r\n goal_linear_threshold: 0.02\r\n goal_angular_threshold: 0.02\r\n max_linear_velocity: 0.1\r\n max_angular_velocity: 0.3\r\n max_linear_acceleration: 0.1\r\n max_angular_acceleration: 3.5\r\n loop_indefinitly: false\r\n US_sensor_int_threshold: 0.4\r\n US_sensor_ext_threshold: 0.4\r\n\r\n obstacle_pause_duration: 1.0\r\n #set 0 for infinite consecutive iteration\r\n obstacle_pause_max_consecutive_iterations: 0\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(7, 1, '/docking', 'offset.yaml', '', 'offset: 0.01\r\nundock_distance: 0.3\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(8, 1, '/docking', 'routine_trajectory.yaml', '', '# config.yaml\r\n\r\nparameters:\r\n control_loop_freq: 20\r\n goal_linear_threshold: 0.02\r\n goal_angular_threshold: 0.02\r\n max_linear_velocity: 0.2\r\n max_angular_velocity: 0.7\r\n max_linear_acceleration: 0.01\r\n max_angular_acceleration: 0.7\r\n loop_indefinitly: false\r\n US_sensor_int_threshold: 0.5\r\n US_sensor_ext_threshold: 0.15\r\n obstacle_pause_duration: 2.0 \r\n #set 0 for infinite consecutive iteration \r\n obstacle_pause_max_consecutive_iterations: 0\r\n\r\ngoals:\r\n- id: 0\r\n  x: -0.35\r\n  y: 0\r\n  theta: 0\r\n  direction: -1\r\n- id: 1\r\n  x: -0.5\r\n  y: 0\r\n  theta: 0\r\n  direction: -1\r\n- id: 2\r\n  x: 0\r\n  y: 0\r\n  theta: 0.78539816339744830962\r\n  direction: -1\r\n- id: 3\r\n  x: 5\r\n  y: 0\r\n  theta: 0\r\n  direction: 0\r\n- id: 4\r\n  x: 0\r\n  y: 0\r\n  theta: -1.57079632679489661923\r\n  direction: -1\r\n- id: 5\r\n  x: 5\r\n  y: 0\r\n  theta: 0\r\n  direction: 0\r\n- id: 6\r\n  x: 0\r\n  y: 0\r\n  theta: 1.57079632679489661923\r\n  direction: -1\r\n- id: 7\r\n  x: 5\r\n  y: 0\r\n  theta: 0\r\n  direction: 0\r\n- id: 8\r\n  x: 0\r\n  y: 0\r\n  theta: -1.57079632679489661923\r\n  direction: -1\r\n- id: 9\r\n  x: 0\r\n  y: 0\r\n  theta: 0.78539816339744830962\r\n  direction: -1\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(9, 1, '/docking', 'undock_trajectory.yaml', '', '# config.yaml\r\n\r\nparameters:\r\n control_loop_freq: 20\r\n goal_linear_threshold: 0.02\r\n goal_angular_threshold: 0.02\r\n max_linear_velocity: 0.2\r\n max_angular_velocity: 0.7\r\n max_linear_acceleration: 0.01\r\n max_angular_acceleration: 0.7\r\n loop_indefinitly: false\r\n US_sensor_int_threshold: 0.2\r\n US_sensor_ext_threshold: 0.15\r\n obstacle_pause_duration: 2.0 \r\n #set 0 for infinite consecutive iteration \r\n obstacle_pause_max_consecutive_iterations: 0\r\n control_linear_P_gain: 1.0 \r\n control_angular_P_gain: 2.0 \r\n\r\ngoals:\r\n- id: 0\r\n  x: -0.35\r\n  y: 0\r\n  theta: 0\r\n  direction: -1\r\n- id: 1\r\n  x: 0\r\n  y: 0\r\n  theta: -2.5\r\n  direction: -1\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(10, 1, '/joy', 'xboxOverride.config.yaml', '', 'axis_linear: 4  # Left thumb stick vertical\r\nscale_linear: 0.5\r\nscale_linear_turbo: 1.0\r\n\r\naxis_angular: 3  # Left thumb stick horizontal\r\nscale_angular: 1\r\n\r\nenable_button: 5  # Right  trigger button\r\n#enable_turbo_button: 14  # low digital cross button\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(11, 1, '/joy', 'xboxSafe.config.yaml', '', 'axis_linear: 1  # Left thumb stick vertical\r\nscale_linear: 0.5\r\nscale_linear_turbo: 1.5\r\n\r\naxis_angular: 0  # Left thumb stick horizontal\r\nscale_angular: 0.8\r\n\r\nenable_button: 4  # Left trigger button\r\n#enable_turbo_button: 5  # Right trigger button\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(12, 1, '/laser_filter', 'scan_filter.yaml', '', 'scan_filter_chain:\r\n- name: shadows\r\n  type: laser_filters/ScanShadowsFilter\r\n  params:\r\n    min_angle: 1\r\n    max_angle: 179\r\n    neighbors: 25\r\n    window: 2\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(13, 1, '/leds', 'leds.yaml', '', 'CON_ANIM: 4\r\nCON_R: 255\r\nCON_G: 75\r\nCON_B: 0\r\nAU_ANIM: 5\r\nAU_R: 204\r\nAU_G: 0\r\nAU_B: 0\r\nMOVE_ANIM: 9\r\nMOVE_R: 0\r\nMOVE_G: 0\r\nMOVE_B: 255\r\nCHARGE_ANIM: 2\r\nCHARGE_R: 0\r\nCHARGE_G: 215\r\nCHARGE_B: 0\r\nARRET_ANIM: 4\r\nARRET_R: 0\r\nARRET_G: 0\r\nARRET_B: 255\r\nMAN_ANIM: 4\r\nMAN_R: 0\r\nMAN_G: 0\r\nMAN_B: 255\r\nLIGHT_ANIM: 10\r\nLIGHT_R: 255\r\nLIGHT_G: 255\r\nLIGHT_B: 255\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(14, 1, '/nav', 'amcl.yaml', '', 'odom_model_type: \"diff-corrected\"\r\n#expected noise in odometry\'s rotation estimate from the rotational component of the robot\'s motion\r\nodom_alpha1: 0.01\r\n#expected noise in odometry\'s rotation estimate from translational component of the robot\'s motion\r\nodom_alpha2: 0.03\r\n#expected noise in odometry\'s translation estimate from the translational component of the robot\'s motion.\r\nodom_alpha3: 0.03\r\n#expected noise in odometry\'s translation estimate from the rotational component of the robot\'s motion\r\nodom_alpha4: 0.01\r\n#Translation-related noise parameter (only used if model is \"omni\")\r\nodom_alpha5: 0.003\r\n\r\ntransform_tolerance: 0.2\r\ngui_publish_rate: 10.0\r\nlaser_max_beams: 30\r\nmin_particles: 500\r\nmax_particles: 5000\r\nkld_err: 0.05\r\nkld_z: 0.99\r\n\r\ndo_beamskip: true\r\n\r\nlaser_model_type: \"likelihood_field\"\r\nlaser_z_hit: 0.95\r\nlaser_z_short: 0.05\r\nlaser_z_max: 0.05\r\nlaser_z_rand: 0.05\r\nlaser_sigma_hit: 0.2\r\nlaser_lambda_short: 0.1\r\nlaser_lambda_short: 0.1\r\nlaser_likelihood_max_dist: 2.0\r\n\r\nupdate_min_d: 0.05\r\nupdate_min_a: 0.05\r\nodom_frame_id: \"odom\"\r\nresample_interval: 1\r\nrecovery_alpha_slow: 0.0\r\nrecovery_alpha_fast: 0.0\r\ninitial_pose_x: 0\r\ninitial_pose_y: 0\r\ninitial_pose_a: 0\r\nbase_frame_id: \"base_footprint\"\r\nglobal_frame_id: \"map\"\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(15, 1, '/nav', 'costmap_common_params.yaml', '', '\r\n\r\ntransform_tolerance: 0.2\r\nmap_type: costmap\r\nrobot_radius: 0.26\r\n\r\nobstacle_layer:\r\n enabled: true\r\n obstacle_range: 5.6\r\n raytrace_range: 4.0\r\n inflation_radius: 0.0\r\n track_unknown_space: true\r\n combination_method: 1\r\n\r\n observation_sources: laser_scan_sensor_marking laser_scan_sensor_clearing\r\n laser_scan_sensor_marking: {data_type: LaserScan, topic: scan_nan_cleaned, marking: false, clearing: true, inf_is_valid: true}\r\n laser_scan_sensor_clearing: {data_type: LaserScan, topic: scan_filtered, marking: true, clearing: false, inf_is_valid: true}\r\n\r\nobstacle_layer_noisy:\r\n enabled: true\r\n obstacle_range: 3.0\r\n raytrace_range: 4.0\r\n inflation_radius: 0.0\r\n track_unknown_space: true\r\n combination_method: 1\r\n\r\n observation_sources: laser_scan_sensor \r\n\r\n laser_scan_sensor: {data_type: LaserScan, topic: scan_nan_cleaned, marking: true, clearing: true, inf_is_valid: true}\r\n\r\n r200_3d: {data_type: PointCloud2, topic: camera/depth/points, marking: true, clearing: true, inf_is_valid: true, max_obstacle_height: 1.3, min_obstacle_height: 0.1}\r\n\r\n\r\ninflation_layer:\r\n  enabled:              true\r\n  cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)\r\n  inflation_radius:     1.0  # max. distance from an obstacle at which costs are incurred for planning paths.\r\n\r\nsonar_layer:\r\n  clear_threshold:    0.2\r\n  mark_threshold:     0.7\r\n  no_readings_timeout: 0.0\r\n  ns:     /sensors/US\r\n  clear_on_max_reading: true\r\n  topics: [\"US_front_ext_left\", \"US_front_ext_right\", \"US_front_int_left\", \"US_front_int_right\", \"US_back_ext_left\", \"US_back_ext_right\", \"US_back_int_left\", \"US_back_int_right\"]\r\n\r\nstatic_layer:\r\n  enabled:              true\r\n  map_topic:            \"/map_forbidden_zones\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(16, 1, '/nav', 'global_costmap_params.yaml', '', '\r\nglobal_costmap:\r\n  global_frame: map\r\n  robot_base_frame: base_link\r\n  update_frequency: 1.0\r\n  publish_frequency: 0.5\r\n  static_map: true\r\n\r\n  transform_tolerance: 0.5\r\n\r\n  plugins:\r\n    - {name: static_layer,            type: \"costmap_2d::StaticLayer\"}\r\n    - {name: inflation_layer,         type: \"costmap_2d::InflationLayer\"}\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(17, 1, '/nav', 'local_costmap_params.yaml', '', 'local_costmap:\r\n  global_frame: odom\r\n  robot_base_frame: base_link\r\n  update_frequency: 20.0\r\n  publish_frequency: 20.0\r\n  static_map: false\r\n  rolling_window: true\r\n  width: 5.5\r\n  height: 5.5\r\n  resolution: 0.05\r\n  transform_tolerance: 0.5\r\n  \r\n  plugins:\r\n   - {name: static_layer,        type: \"costmap_2d::StaticLayer\"}\r\n   - {name: obstacle_layer,      type: \"costmap_2d::ObstacleLayer\"}\r\n   - {name: sonar_layer,      type: \"range_sensor_layer::RangeSensorLayer\"}\r\n   - {name: inflation_layer,         type: \"costmap_2d::InflationLayer\"}\r\n\r\n\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(18, 1, '/nav', 'teb_local_planner_params.yaml', '', 'recovery_behavior_enabled: False\r\n\r\nTebLocalPlannerROS:\r\n\r\n odom_topic: odom\r\n map_frame: map\r\n    \r\n # Trajectory\r\n  \r\n teb_autosize: True\r\n dt_ref: 0.3\r\n dt_hysteresis: 0.1\r\n global_plan_overwrite_orientation: True\r\n max_global_plan_lookahead_dist: 7.0\r\n feasibility_check_no_poses: 3\r\n    \r\n # Robot\r\n         \r\n max_vel_x: 0.5\r\n max_vel_x_backwards: 0.11\r\n max_vel_y: 0.0\r\n max_vel_theta: 1.5\r\n acc_lim_x: 0.1\r\n acc_lim_theta: 0.8\r\n min_turning_radius: 0.0\r\n footprint_model: # types: \"point\", \"circular\", \"two_circles\", \"line\", \"polygon\"\r\n   type: \"circular\"\r\n   radius: 0.27 # for type \"circular\"\r\n   line_start: [-0.3, 0.0] # for type \"line\"\r\n   line_end: [0.3, 0.0] # for type \"line\"\r\n   front_offset: 0.2 # for type \"two_circles\"\r\n   front_radius: 0.2 # for type \"two_circles\"\r\n   rear_offset: 0.2 # for type \"two_circles\"\r\n   rear_radius: 0.2 # for type \"two_circles\"\r\n   vertices: [[-0.27, 0.315], [0.27, 0.315], [0.27, -0.315], [-0.27, -0.315]] # for type \"polygon\"\r\n\r\n # GoalTolerance\r\n    \r\n xy_goal_tolerance: 0.2\r\n yaw_goal_tolerance: 0.1\r\n free_goal_vel: False\r\n    \r\n # Obstacles\r\n \r\n inflation_dist: 0.27    \r\n min_obstacle_dist: 0.1\r\n include_costmap_obstacles: True\r\n costmap_obstacles_behind_robot_dist: 1.0\r\n obstacle_poses_affected: 30\r\n costmap_converter_plugin: \"\"\r\n costmap_converter_spin_thread: True\r\n costmap_converter_rate: 5\r\n\r\n # Optimization\r\n    \r\n no_inner_iterations: 2\r\n no_outer_iterations: 2\r\n optimization_activate: True\r\n optimization_verbose: False\r\n penalty_epsilon: 0.05\r\n weight_max_vel_x: 2\r\n weight_max_vel_theta: 1\r\n weight_acc_lim_x: 1\r\n weight_acc_lim_theta: 1\r\n weight_kinematics_nh: 1000\r\n weight_kinematics_forward_drive: 100\r\n weight_kinematics_turning_radius: 1\r\n weight_optimaltime: 1\r\n weight_obstacle: 50\r\n weight_dynamic_obstacle: 10 # not in use yet\r\n alternative_time_cost: False # not in use yet\r\n\r\n # Homotopy Class Planner\r\n\r\n enable_homotopy_class_planning: False\r\n enable_multithreading: True\r\n simple_exploration: False\r\n max_number_classes: 1\r\n selection_cost_hysteresis: 1.0\r\n selection_obst_cost_scale: 1.0\r\n selection_alternative_time_cost: False\r\n \r\n roadmap_graph_no_samples: 15\r\n roadmap_graph_area_width: 5\r\n h_signature_prescaler: 0.5\r\n h_signature_threshold: 0.1\r\n obstacle_keypoint_offset: 0.1\r\n obstacle_heading_threshold: 0.45\r\n visualize_hc_graph: False\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(19, 1, '/poses', 'poses.yaml', '', 'dock1: {theta: [DOCK_T], x: [DOCK_X], y: [DOCK_Y]}\r\nstart1: {theta: [START_T], x: [START_X], y: [START_Y]}\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:10:05'),
(20, 1, '/stats', 'locker.yaml', '', '{history_empty_errors: 0, history_lockers_distributed: 0, locker_count: 0}\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:10:26'),
(21, 1, '/teleop_velocity_smoother', 'limits.yaml', '', '# Example configuration:\r\n# - velocity limits are around a 10% above the physical limits\r\n# - acceleration limits are just low enough to avoid jerking\r\n\r\n# Mandatory parameters\r\nspeed_lim_v: 1.2\r\nspeed_lim_w: 1.5\r\n\r\naccel_lim_v: 1.2\r\naccel_lim_w: 8.0\r\n\r\n# Optional parameters\r\nfrequency: 20.0\r\ndecel_factor: 1.0\r\n\r\n# Robot velocity feedback type:\r\n#  0 - none\r\n#  1 - odometry\r\n#  2 - end robot commands\r\nrobot_feedback: 2\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(22, 1, '/twist_mux', 'twist_mux_locks_l1.yaml', '', '# Locks to stop the twist inputs.\r\n# For each lock:\r\n# - topic   : input topic that provides the lock; it must be of type std_msgs::Bool?!!! \r\n# - timeout : == 0.0 -> not used\r\n#              > 0.0 -> the lock is supposed to published at a certain frequency in order\r\n#                       to detect that the publisher is alive; the timeout in seconds allows\r\n#                       to detect that, and if the publisher dies we will enable the lock\r\n# - priority: priority in the range [0, 255], so all the topics with priority lower than it\r\n#             will be stopped/disabled\r\n\r\nlocks:\r\n-\r\n  name    : RELAY_BLOCK\r\n  topic   : /relays/connect_dock_power_supply\r\n  timeout : 0.0\r\n  priority: 255\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(23, 1, '/twist_mux', 'twist_mux_locks_l2.yaml', '', '# Locks to stop the twist inputs.\r\n# For each lock:\r\n# - topic   : input topic that provides the lock; it must be of type std_msgs::Bool?!!! \r\n# - timeout : == 0.0 -> not used\r\n#              > 0.0 -> the lock is supposed to published at a certain frequency in order\r\n#                       to detect that the publisher is alive; the timeout in seconds allows\r\n#                       to detect that, and if the publisher dies we will enable the lock\r\n# - priority: priority in the range [0, 255], so all the topics with priority lower than it\r\n#             will be stopped/disabled\r\n\r\nlocks:\r\n-\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(24, 1, '/twist_mux', 'twist_mux_topics_l1.yaml', '', '# Input topics handled/muxed.\r\n# For each topic:\r\n# - name    : name identifier to select the topic\r\n# - topic   : input topic of geometry_msgs::Twist type\r\n# - timeout : timeout in seconds to start discarding old messages, and use 0.0 speed instead\r\n# - priority: priority in the range [0, 255]; the higher the more priority over other topics\r\n\r\ntopics:\r\n-\r\n  name    : navigation\r\n  topic   : navigation_stack/cmd_vel\r\n  timeout : 0.5\r\n  priority: 10\r\n-\r\n  name    : docking\r\n  topic   : /cmd_vel/docking\r\n  timeout : 0.5\r\n  priority: 40\r\n-\r\n  name    : teleop\r\n  topic   : /cmd_vel/teleop_smoothed\r\n  timeout : 0.5\r\n  priority: 50\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(25, 1, '/twist_mux', 'twist_mux_topics_l2.yaml', '', '# Input topics handled/muxed.\r\n# For each topic:\r\n# - name    : name identifier to select the topic\r\n# - topic   : input topic of geometry_msgs::Twist type\r\n# - timeout : timeout in seconds to start discarding old messages, and use 0.0 speed instead\r\n# - priority: priority in the range [0, 255]; the higher the more priority over other topics\r\n\r\ntopics:\r\n-\r\n  name    : teleop_safe\r\n  topic   : /cmd_vel/teleop_safe\r\n  timeout : 0.5\r\n  priority: 50\r\n-\r\n  name    : joystick_unsafe\r\n  topic   : /cmd_vel/teleop_unsafe\r\n  timeout : 0.5\r\n  priority: 250\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2745, 4, '/map', 'map_forbidden.png', '', '', 0, '0000-00-00 00:00:00', '2020-03-09 14:04:36'),
(2746, 4, '/map', 'map_areas.png', '', '', 0, '0000-00-00 00:00:00', '2020-03-09 14:04:36'),
(2747, 4, '/map', 'map_areas.yaml', '', 'image: map_areas.png\r\nresolution: 0.05\r\norigin: [0.0, 0.0, 0.0]\r\noccupied_thresh: 0.65\r\nfree_thresh: 0.196\r\nnegate: 0\r\nmode: raw\r\n', 0, '0000-00-00 00:00:00', '2020-03-09 14:04:36'),
(2748, 4, '/map', 'areas.yaml', '', '', 0, '0000-00-00 00:00:00', '2020-03-09 14:04:36'),
(2737, 4, '/poses', 'poses.yaml', '', 'dock1: {theta: [DOCK_T], x: [DOCK_X], y: [DOCK_Y]}\r\nstart1: {theta: [START_T], x: [START_X], y: [START_Y]}\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:10:05'),
(2738, 4, '/stats', 'locker.yaml', '', '{history_empty_errors: 0, history_lockers_distributed: 0, locker_count: 0}\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:10:26'),
(2739, 4, '/teleop_velocity_smoother', 'limits.yaml', '', '# Example configuration:\r\n# - velocity limits are around a 10% above the physical limits\r\n# - acceleration limits are just low enough to avoid jerking\r\n\r\n# Mandatory parameters\r\nspeed_lim_v: 1.2\r\nspeed_lim_w: 1.5\r\n\r\naccel_lim_v: 1.2\r\naccel_lim_w: 8.0\r\n\r\n# Optional parameters\r\nfrequency: 20.0\r\ndecel_factor: 1.0\r\n\r\n# Robot velocity feedback type:\r\n#  0 - none\r\n#  1 - odometry\r\n#  2 - end robot commands\r\nrobot_feedback: 2\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2740, 4, '/twist_mux', 'twist_mux_locks_l1.yaml', '', '# Locks to stop the twist inputs.\r\n# For each lock:\r\n# - topic   : input topic that provides the lock; it must be of type std_msgs::Bool?!!! \r\n# - timeout : == 0.0 -> not used\r\n#              > 0.0 -> the lock is supposed to published at a certain frequency in order\r\n#                       to detect that the publisher is alive; the timeout in seconds allows\r\n#                       to detect that, and if the publisher dies we will enable the lock\r\n# - priority: priority in the range [0, 255], so all the topics with priority lower than it\r\n#             will be stopped/disabled\r\n\r\nlocks:\r\n-\r\n  name    : RELAY_BLOCK\r\n  topic   : /relays/connect_dock_power_supply\r\n  timeout : 0.0\r\n  priority: 255\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2741, 4, '/twist_mux', 'twist_mux_locks_l2.yaml', '', '# Locks to stop the twist inputs.\r\n# For each lock:\r\n# - topic   : input topic that provides the lock; it must be of type std_msgs::Bool?!!! \r\n# - timeout : == 0.0 -> not used\r\n#              > 0.0 -> the lock is supposed to published at a certain frequency in order\r\n#                       to detect that the publisher is alive; the timeout in seconds allows\r\n#                       to detect that, and if the publisher dies we will enable the lock\r\n# - priority: priority in the range [0, 255], so all the topics with priority lower than it\r\n#             will be stopped/disabled\r\n\r\nlocks:\r\n-\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2742, 4, '/twist_mux', 'twist_mux_topics_l1.yaml', '', '# Input topics handled/muxed.\r\n# For each topic:\r\n# - name    : name identifier to select the topic\r\n# - topic   : input topic of geometry_msgs::Twist type\r\n# - timeout : timeout in seconds to start discarding old messages, and use 0.0 speed instead\r\n# - priority: priority in the range [0, 255]; the higher the more priority over other topics\r\n\r\ntopics:\r\n-\r\n  name    : navigation\r\n  topic   : navigation_stack/cmd_vel\r\n  timeout : 0.5\r\n  priority: 10\r\n-\r\n  name    : docking\r\n  topic   : /cmd_vel/docking\r\n  timeout : 0.5\r\n  priority: 40\r\n-\r\n  name    : teleop\r\n  topic   : /cmd_vel/teleop_smoothed\r\n  timeout : 0.5\r\n  priority: 50\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2743, 4, '/twist_mux', 'twist_mux_topics_l2.yaml', '', '# Input topics handled/muxed.\r\n# For each topic:\r\n# - name    : name identifier to select the topic\r\n# - topic   : input topic of geometry_msgs::Twist type\r\n# - timeout : timeout in seconds to start discarding old messages, and use 0.0 speed instead\r\n# - priority: priority in the range [0, 255]; the higher the more priority over other topics\r\n\r\ntopics:\r\n-\r\n  name    : teleop_safe\r\n  topic   : /cmd_vel/teleop_safe\r\n  timeout : 0.5\r\n  priority: 50\r\n-\r\n  name    : joystick_unsafe\r\n  topic   : /cmd_vel/teleop_unsafe\r\n  timeout : 0.5\r\n  priority: 250\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2744, 4, '/map', 'map_amcl.png', '', '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', 0, '0000-00-00 00:00:00', '2020-03-09 14:04:36'),
(2736, 4, '/nav', 'teb_local_planner_params.yaml', '', 'recovery_behavior_enabled: False\r\n\r\nTebLocalPlannerROS:\r\n\r\n odom_topic: odom\r\n map_frame: map\r\n    \r\n # Trajectory\r\n  \r\n teb_autosize: True\r\n dt_ref: 0.3\r\n dt_hysteresis: 0.1\r\n global_plan_overwrite_orientation: True\r\n max_global_plan_lookahead_dist: 7.0\r\n feasibility_check_no_poses: 3\r\n    \r\n # Robot\r\n         \r\n max_vel_x: 0.5\r\n max_vel_x_backwards: 0.11\r\n max_vel_y: 0.0\r\n max_vel_theta: 1.5\r\n acc_lim_x: 0.1\r\n acc_lim_theta: 0.8\r\n min_turning_radius: 0.0\r\n footprint_model: # types: \"point\", \"circular\", \"two_circles\", \"line\", \"polygon\"\r\n   type: \"circular\"\r\n   radius: 0.27 # for type \"circular\"\r\n   line_start: [-0.3, 0.0] # for type \"line\"\r\n   line_end: [0.3, 0.0] # for type \"line\"\r\n   front_offset: 0.2 # for type \"two_circles\"\r\n   front_radius: 0.2 # for type \"two_circles\"\r\n   rear_offset: 0.2 # for type \"two_circles\"\r\n   rear_radius: 0.2 # for type \"two_circles\"\r\n   vertices: [[-0.27, 0.315], [0.27, 0.315], [0.27, -0.315], [-0.27, -0.315]] # for type \"polygon\"\r\n\r\n # GoalTolerance\r\n    \r\n xy_goal_tolerance: 0.2\r\n yaw_goal_tolerance: 0.1\r\n free_goal_vel: False\r\n    \r\n # Obstacles\r\n \r\n inflation_dist: 0.27    \r\n min_obstacle_dist: 0.1\r\n include_costmap_obstacles: True\r\n costmap_obstacles_behind_robot_dist: 1.0\r\n obstacle_poses_affected: 30\r\n costmap_converter_plugin: \"\"\r\n costmap_converter_spin_thread: True\r\n costmap_converter_rate: 5\r\n\r\n # Optimization\r\n    \r\n no_inner_iterations: 2\r\n no_outer_iterations: 2\r\n optimization_activate: True\r\n optimization_verbose: False\r\n penalty_epsilon: 0.05\r\n weight_max_vel_x: 2\r\n weight_max_vel_theta: 1\r\n weight_acc_lim_x: 1\r\n weight_acc_lim_theta: 1\r\n weight_kinematics_nh: 1000\r\n weight_kinematics_forward_drive: 100\r\n weight_kinematics_turning_radius: 1\r\n weight_optimaltime: 1\r\n weight_obstacle: 50\r\n weight_dynamic_obstacle: 10 # not in use yet\r\n alternative_time_cost: False # not in use yet\r\n\r\n # Homotopy Class Planner\r\n\r\n enable_homotopy_class_planning: False\r\n enable_multithreading: True\r\n simple_exploration: False\r\n max_number_classes: 1\r\n selection_cost_hysteresis: 1.0\r\n selection_obst_cost_scale: 1.0\r\n selection_alternative_time_cost: False\r\n \r\n roadmap_graph_no_samples: 15\r\n roadmap_graph_area_width: 5\r\n h_signature_prescaler: 0.5\r\n h_signature_threshold: 0.1\r\n obstacle_keypoint_offset: 0.1\r\n obstacle_heading_threshold: 0.45\r\n visualize_hc_graph: False\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2734, 4, '/nav', 'global_costmap_params.yaml', '', '\r\nglobal_costmap:\r\n  global_frame: map\r\n  robot_base_frame: base_link\r\n  update_frequency: 1.0\r\n  publish_frequency: 0.5\r\n  static_map: true\r\n\r\n  transform_tolerance: 0.5\r\n\r\n  plugins:\r\n    - {name: static_layer,            type: \"costmap_2d::StaticLayer\"}\r\n    - {name: inflation_layer,         type: \"costmap_2d::InflationLayer\"}\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2735, 4, '/nav', 'local_costmap_params.yaml', '', 'local_costmap:\r\n  global_frame: odom\r\n  robot_base_frame: base_link\r\n  update_frequency: 20.0\r\n  publish_frequency: 20.0\r\n  static_map: false\r\n  rolling_window: true\r\n  width: 5.5\r\n  height: 5.5\r\n  resolution: 0.05\r\n  transform_tolerance: 0.5\r\n  \r\n  plugins:\r\n   - {name: static_layer,        type: \"costmap_2d::StaticLayer\"}\r\n   - {name: obstacle_layer,      type: \"costmap_2d::ObstacleLayer\"}\r\n   - {name: sonar_layer,      type: \"range_sensor_layer::RangeSensorLayer\"}\r\n   - {name: inflation_layer,         type: \"costmap_2d::InflationLayer\"}\r\n\r\n\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2733, 4, '/nav', 'costmap_common_params.yaml', '', '\r\n\r\ntransform_tolerance: 0.2\r\nmap_type: costmap\r\nrobot_radius: 0.26\r\n\r\nobstacle_layer:\r\n enabled: true\r\n obstacle_range: 5.6\r\n raytrace_range: 4.0\r\n inflation_radius: 0.0\r\n track_unknown_space: true\r\n combination_method: 1\r\n\r\n observation_sources: laser_scan_sensor_marking laser_scan_sensor_clearing\r\n laser_scan_sensor_marking: {data_type: LaserScan, topic: scan_nan_cleaned, marking: false, clearing: true, inf_is_valid: true}\r\n laser_scan_sensor_clearing: {data_type: LaserScan, topic: scan_filtered, marking: true, clearing: false, inf_is_valid: true}\r\n\r\nobstacle_layer_noisy:\r\n enabled: true\r\n obstacle_range: 3.0\r\n raytrace_range: 4.0\r\n inflation_radius: 0.0\r\n track_unknown_space: true\r\n combination_method: 1\r\n\r\n observation_sources: laser_scan_sensor \r\n\r\n laser_scan_sensor: {data_type: LaserScan, topic: scan_nan_cleaned, marking: true, clearing: true, inf_is_valid: true}\r\n\r\n r200_3d: {data_type: PointCloud2, topic: camera/depth/points, marking: true, clearing: true, inf_is_valid: true, max_obstacle_height: 1.3, min_obstacle_height: 0.1}\r\n\r\n\r\ninflation_layer:\r\n  enabled:              true\r\n  cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)\r\n  inflation_radius:     1.0  # max. distance from an obstacle at which costs are incurred for planning paths.\r\n\r\nsonar_layer:\r\n  clear_threshold:    0.2\r\n  mark_threshold:     0.7\r\n  no_readings_timeout: 0.0\r\n  ns:     /sensors/US\r\n  clear_on_max_reading: true\r\n  topics: [\"US_front_ext_left\", \"US_front_ext_right\", \"US_front_int_left\", \"US_front_int_right\", \"US_back_ext_left\", \"US_back_ext_right\", \"US_back_int_left\", \"US_back_int_right\"]\r\n\r\nstatic_layer:\r\n  enabled:              true\r\n  map_topic:            \"/map_forbidden_zones\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2729, 4, '/joy', 'xboxSafe.config.yaml', '', 'axis_linear: 1  # Left thumb stick vertical\r\nscale_linear: 0.5\r\nscale_linear_turbo: 1.5\r\n\r\naxis_angular: 0  # Left thumb stick horizontal\r\nscale_angular: 0.8\r\n\r\nenable_button: 4  # Left trigger button\r\n#enable_turbo_button: 5  # Right trigger button\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2730, 4, '/laser_filter', 'scan_filter.yaml', '', 'scan_filter_chain:\r\n- name: shadows\r\n  type: laser_filters/ScanShadowsFilter\r\n  params:\r\n    min_angle: 1\r\n    max_angle: 179\r\n    neighbors: 25\r\n    window: 2\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2731, 4, '/leds', 'leds.yaml', '', 'CON_ANIM: 4\r\nCON_R: 255\r\nCON_G: 75\r\nCON_B: 0\r\nAU_ANIM: 5\r\nAU_R: 204\r\nAU_G: 0\r\nAU_B: 0\r\nMOVE_ANIM: 9\r\nMOVE_R: 0\r\nMOVE_G: 0\r\nMOVE_B: 255\r\nCHARGE_ANIM: 2\r\nCHARGE_R: 0\r\nCHARGE_G: 215\r\nCHARGE_B: 0\r\nARRET_ANIM: 4\r\nARRET_R: 0\r\nARRET_G: 0\r\nARRET_B: 255\r\nMAN_ANIM: 4\r\nMAN_R: 0\r\nMAN_G: 0\r\nMAN_B: 255\r\nLIGHT_ANIM: 10\r\nLIGHT_R: 255\r\nLIGHT_G: 255\r\nLIGHT_B: 255\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2732, 4, '/nav', 'amcl.yaml', '', 'odom_model_type: \"diff-corrected\"\r\n#expected noise in odometry\'s rotation estimate from the rotational component of the robot\'s motion\r\nodom_alpha1: 0.01\r\n#expected noise in odometry\'s rotation estimate from translational component of the robot\'s motion\r\nodom_alpha2: 0.03\r\n#expected noise in odometry\'s translation estimate from the translational component of the robot\'s motion.\r\nodom_alpha3: 0.03\r\n#expected noise in odometry\'s translation estimate from the rotational component of the robot\'s motion\r\nodom_alpha4: 0.01\r\n#Translation-related noise parameter (only used if model is \"omni\")\r\nodom_alpha5: 0.003\r\n\r\ntransform_tolerance: 0.2\r\ngui_publish_rate: 10.0\r\nlaser_max_beams: 30\r\nmin_particles: 500\r\nmax_particles: 5000\r\nkld_err: 0.05\r\nkld_z: 0.99\r\n\r\ndo_beamskip: true\r\n\r\nlaser_model_type: \"likelihood_field\"\r\nlaser_z_hit: 0.95\r\nlaser_z_short: 0.05\r\nlaser_z_max: 0.05\r\nlaser_z_rand: 0.05\r\nlaser_sigma_hit: 0.2\r\nlaser_lambda_short: 0.1\r\nlaser_lambda_short: 0.1\r\nlaser_likelihood_max_dist: 2.0\r\n\r\nupdate_min_d: 0.05\r\nupdate_min_a: 0.05\r\nodom_frame_id: \"odom\"\r\nresample_interval: 1\r\nrecovery_alpha_slow: 0.0\r\nrecovery_alpha_fast: 0.0\r\ninitial_pose_x: 0\r\ninitial_pose_y: 0\r\ninitial_pose_a: 0\r\nbase_frame_id: \"base_footprint\"\r\nglobal_frame_id: \"map\"\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2728, 4, '/joy', 'xboxOverride.config.yaml', '', 'axis_linear: 4  # Left thumb stick vertical\r\nscale_linear: 0.5\r\nscale_linear_turbo: 1.0\r\n\r\naxis_angular: 3  # Left thumb stick horizontal\r\nscale_angular: 1\r\n\r\nenable_button: 5  # Right  trigger button\r\n#enable_turbo_button: 14  # low digital cross button\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2727, 4, '/docking', 'undock_trajectory.yaml', '', '# config.yaml\r\n\r\nparameters:\r\n control_loop_freq: 20\r\n goal_linear_threshold: 0.02\r\n goal_angular_threshold: 0.02\r\n max_linear_velocity: 0.2\r\n max_angular_velocity: 0.7\r\n max_linear_acceleration: 0.01\r\n max_angular_acceleration: 0.7\r\n loop_indefinitly: false\r\n US_sensor_int_threshold: 0.2\r\n US_sensor_ext_threshold: 0.15\r\n obstacle_pause_duration: 2.0 \r\n #set 0 for infinite consecutive iteration \r\n obstacle_pause_max_consecutive_iterations: 0\r\n control_linear_P_gain: 1.0 \r\n control_angular_P_gain: 2.0 \r\n\r\ngoals:\r\n- id: 0\r\n  x: -0.35\r\n  y: 0\r\n  theta: 0\r\n  direction: -1\r\n- id: 1\r\n  x: 0\r\n  y: 0\r\n  theta: -2.5\r\n  direction: -1\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2723, 4, '/collision_velocity_filter', 'local_costmap_params.yaml', '', 'local_costmap:\r\n  global_frame: odom\r\n  robot_base_frame: base_link\r\n  update_frequency: 20.0\r\n  publish_frequency: 20.0\r\n  static_map: false\r\n  rolling_window: true\r\n  width: 5.5\r\n  height: 5.5\r\n  resolution: 0.05\r\n  transform_tolerance: 0.5\r\n  \r\n  plugins:\r\n   - {name: static_layer,        type: \"costmap_2d::StaticLayer\"}\r\n   - {name: obstacle_layer,      type: \"costmap_2d::ObstacleLayer\"}\r\n   - {name: sonar_layer,      type: \"range_sensor_layer::RangeSensorLayer\"}\r\n   - {name: inflation_layer,         type: \"costmap_2d::InflationLayer\"}\r\n\r\n\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2724, 4, '/docking', 'odom_simple_goal.yaml', '', '# config.yaml\r\n\r\nparameters:\r\n control_loop_freq: 20\r\n control_linear_P_gain: 1.0\r\n control_angular_P_gain: 2.0\r\n goal_linear_threshold: 0.02\r\n goal_angular_threshold: 0.02\r\n max_linear_velocity: 0.1\r\n max_angular_velocity: 0.3\r\n max_linear_acceleration: 0.1\r\n max_angular_acceleration: 3.5\r\n loop_indefinitly: false\r\n US_sensor_int_threshold: 0.4\r\n US_sensor_ext_threshold: 0.4\r\n\r\n obstacle_pause_duration: 1.0\r\n #set 0 for infinite consecutive iteration\r\n obstacle_pause_max_consecutive_iterations: 0\r\n\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2725, 4, '/docking', 'offset.yaml', '', 'offset: 0.01\r\nundock_distance: 0.3\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2726, 4, '/docking', 'routine_trajectory.yaml', '', '# config.yaml\r\n\r\nparameters:\r\n control_loop_freq: 20\r\n goal_linear_threshold: 0.02\r\n goal_angular_threshold: 0.02\r\n max_linear_velocity: 0.2\r\n max_angular_velocity: 0.7\r\n max_linear_acceleration: 0.01\r\n max_angular_acceleration: 0.7\r\n loop_indefinitly: false\r\n US_sensor_int_threshold: 0.5\r\n US_sensor_ext_threshold: 0.15\r\n obstacle_pause_duration: 2.0 \r\n #set 0 for infinite consecutive iteration \r\n obstacle_pause_max_consecutive_iterations: 0\r\n\r\ngoals:\r\n- id: 0\r\n  x: -0.35\r\n  y: 0\r\n  theta: 0\r\n  direction: -1\r\n- id: 1\r\n  x: -0.5\r\n  y: 0\r\n  theta: 0\r\n  direction: -1\r\n- id: 2\r\n  x: 0\r\n  y: 0\r\n  theta: 0.78539816339744830962\r\n  direction: -1\r\n- id: 3\r\n  x: 5\r\n  y: 0\r\n  theta: 0\r\n  direction: 0\r\n- id: 4\r\n  x: 0\r\n  y: 0\r\n  theta: -1.57079632679489661923\r\n  direction: -1\r\n- id: 5\r\n  x: 5\r\n  y: 0\r\n  theta: 0\r\n  direction: 0\r\n- id: 6\r\n  x: 0\r\n  y: 0\r\n  theta: 1.57079632679489661923\r\n  direction: -1\r\n- id: 7\r\n  x: 5\r\n  y: 0\r\n  theta: 0\r\n  direction: 0\r\n- id: 8\r\n  x: 0\r\n  y: 0\r\n  theta: -1.57079632679489661923\r\n  direction: -1\r\n- id: 9\r\n  x: 0\r\n  y: 0\r\n  theta: 0.78539816339744830962\r\n  direction: -1\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:06:29'),
(2719, 4, '/auth', 'interface_urls.yaml', '', 'page_list: \"https://traxdev.wyca-solutions.com/robot_hmi/mapping/robot.php?id_robot=1&code=rXy5Q9LFbjdzVx7E2rbg\"', 0, '0000-00-00 00:00:00', '2019-08-13 08:08:53'),
(2720, 4, '/auth', 'port.yaml', '', 'port: 9090', 0, '0000-00-00 00:00:00', '2019-08-13 08:09:03'),
(2721, 4, '/auth', 'valid.secret', '', 'zSk81+WIgWIfbl|O', 0, '0000-00-00 00:00:00', '2019-08-13 08:09:12'),
(2722, 4, '/collision_velocity_filter', 'collision_velocity_filter_params.yaml', '', 'footprint_update_frequency: 0.1\r\npot_ctrl_vmax: 0.4\r\npot_ctrl_vtheta_max: 0.4\r\npot_ctrl_kv: 1.0\r\npot_ctrl_kp: 2.0\r\npot_ctrl_virt_mass: 0.8\r\ninfluence_radius: 2.0\r\nobstacle_damping_dist: 1.5\r\nstop_threshold: 0.0\r\nuse_circumscribed_threshold: 0.2\r\ncostmap_obstacle_treshold: 100\r\nis_robot_circular: true\r\n', 0, '0000-00-00 00:00:00', '2019-08-13 08:13:04');

-- --------------------------------------------------------

--
-- Structure de la table `service_book`
--

DROP TABLE IF EXISTS `service_book`;
CREATE TABLE IF NOT EXISTS `service_book` (
  `id_service_book` int(11) NOT NULL AUTO_INCREMENT,
  `date` datetime NOT NULL,
  `title` text NOT NULL,
  `comment` text NOT NULL,
  `id_user` int(11) NOT NULL,
  PRIMARY KEY (`id_service_book`),
  KEY `date` (`date`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `site`
--

DROP TABLE IF EXISTS `site`;
CREATE TABLE IF NOT EXISTS `site` (
  `id_site` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `comment` text NOT NULL,
  PRIMARY KEY (`id_site`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `site`
--

INSERT INTO `site` (`id_site`, `name`, `comment`) VALUES
(1, 'name_test', '');

-- --------------------------------------------------------

--
-- Structure de la table `task`
--

DROP TABLE IF EXISTS `task`;
CREATE TABLE IF NOT EXISTS `task` (
  `id_task` int(11) NOT NULL AUTO_INCREMENT,
  `id_site` int(11) NOT NULL,
  `id_map` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `action_fin` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id_task`),
  KEY `id_site` (`id_site`),
  KEY `id_plan` (`id_map`),
  KEY `name` (`name`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `task_action`
--

DROP TABLE IF EXISTS `task_action`;
CREATE TABLE IF NOT EXISTS `task_action` (
  `id_task_action` int(11) NOT NULL AUTO_INCREMENT,
  `id_task` int(11) NOT NULL,
  `action_type` int(2) NOT NULL,
  `action_detail` text NOT NULL,
  `position` int(3) NOT NULL,
  PRIMARY KEY (`id_task_action`),
  KEY `position` (`position`),
  KEY `id_tache` (`id_task`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `task_cron`
--

DROP TABLE IF EXISTS `task_cron`;
CREATE TABLE IF NOT EXISTS `task_cron` (
  `id_task_cron` int(10) NOT NULL AUTO_INCREMENT,
  `id_task` int(10) NOT NULL,
  `minute` int(2) NOT NULL,
  `hour` int(2) NOT NULL,
  `day` int(2) NOT NULL,
  `month` int(2) NOT NULL,
  `name` varchar(255) NOT NULL,
  `comment` text NOT NULL,
  PRIMARY KEY (`id_task_cron`),
  KEY `id_task` (`id_task`),
  KEY `minute` (`minute`),
  KEY `hour` (`hour`),
  KEY `day` (`day`),
  KEY `month` (`month`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `task_queue`
--

DROP TABLE IF EXISTS `task_queue`;
CREATE TABLE IF NOT EXISTS `task_queue` (
  `id_task_queue` int(11) NOT NULL AUTO_INCREMENT,
  `id_task` int(11) NOT NULL,
  `position` int(3) NOT NULL,
  `state` varchar(255) NOT NULL,
  `progress` varchar(255) NOT NULL,
  `step` int(3) NOT NULL,
  PRIMARY KEY (`id_task_queue`),
  KEY `id_tache` (`id_task`),
  KEY `position` (`position`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `top`
--

DROP TABLE IF EXISTS `top`;
CREATE TABLE IF NOT EXISTS `top` (
  `id_top` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `manufacturer` varchar(255) NOT NULL,
  `size_x` int(5) NOT NULL,
  `size_y` int(5) NOT NULL,
  `size_z` int(5) NOT NULL,
  `have_3d_cam` tinyint(1) NOT NULL DEFAULT '0',
  `pos_x` int(5) NOT NULL,
  `pos_y` int(5) NOT NULL,
  `pos_z` int(5) NOT NULL,
  `image_name` text NOT NULL,
  `have_cpu` tinyint(1) NOT NULL DEFAULT '0',
  `available` tinyint(1) NOT NULL DEFAULT '0',
  `active` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id_top`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `top`
--

INSERT INTO `top` (`id_top`, `name`, `manufacturer`, `size_x`, `size_y`, `size_z`, `have_3d_cam`, `pos_x`, `pos_y`, `pos_z`, `image_name`, `have_cpu`, `available`, `active`) VALUES
(1, 'No top', 'Wyca', 0, 0, 0, 0, 0, 0, 0, 'no_top.png', 0, 1, 1),
(2, 'Cameras', 'Wyca', 0, 0, 0, 1, 0, 0, 0, 'camera.png', 1, 0, 0),
(3, 'Shelf', 'Wyca', 0, 0, 0, 0, 0, 0, 0, 'shelf.png', 0, 0, 0),
(4, 'Roller', 'Wyca', 0, 0, 0, 0, 0, 0, 0, 'roller.png', 0, 0, 0),
(5, 'Security', 'Wyca', 0, 0, 0, 0, 0, 0, 0, 'security.png', 0, 1, 0),
(6, 'RFID', 'Wyca', 0, 0, 0, 0, 0, 0, 0, 'rfid.png', 0, 0, 0),
(7, 'Interactive', 'Wyca', 0, 0, 0, 0, 0, 0, 0, 'interactive.png', 0, 1, 0);

-- --------------------------------------------------------

--
-- Structure de la table `undock_process`
--

DROP TABLE IF EXISTS `undock_process`;
CREATE TABLE IF NOT EXISTS `undock_process` (
  `id_undock_process` int(10) NOT NULL AUTO_INCREMENT,
  `id_docking_station` int(10) NOT NULL,
  `id_poi` int(10) NOT NULL,
  `position` int(10) NOT NULL,
  `x` decimal(8,4) NOT NULL,
  `y` decimal(8,4) NOT NULL,
  `theta` decimal(8,4) NOT NULL,
  PRIMARY KEY (`id_undock_process`),
  KEY `id_docking_station` (`id_docking_station`),
  KEY `id_poi` (`id_poi`),
  KEY `position` (`position`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Structure de la table `user`
--

DROP TABLE IF EXISTS `user`;
CREATE TABLE IF NOT EXISTS `user` (
  `id_user` int(10) NOT NULL AUTO_INCREMENT,
  `email` varchar(255) NOT NULL,
  `pass` varchar(255) NOT NULL,
  `nom` varchar(255) NOT NULL,
  `prenom` varchar(255) NOT NULL,
  `societe` varchar(255) NOT NULL,
  `id_groupe_user` int(10) NOT NULL,
  `actif` tinyint(1) NOT NULL DEFAULT '0',
  `deleted` tinyint(1) NOT NULL DEFAULT '0',
  `last_connection` datetime NOT NULL,
  `api_key` varchar(255) NOT NULL,
  `pin` varchar(8) NOT NULL,
  PRIMARY KEY (`id_user`),
  KEY `actif` (`actif`),
  KEY `deleted` (`deleted`),
  KEY `id_groupe_user` (`id_groupe_user`),
  KEY `email` (`email`),
  KEY `pass` (`pass`)
) ENGINE=MyISAM AUTO_INCREMENT=61 DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `user`
--

INSERT INTO `user` (`id_user`, `email`, `pass`, `nom`, `prenom`, `societe`, `id_groupe_user`, `actif`, `deleted`, `last_connection`, `api_key`, `pin`) VALUES
(1, 'team@wyca.fr', '89d3dbf0cda2ac5bcc2f571a0bb3a828', 'Wyca', '', '', 1, 1, 0, '2020-03-23 09:59:21', '5LGU.LaYMMncJaA0i42HwsX9ZX-RCNgj-9V17ROFXt71st', ''),
(60, 'distributor', '751b823926d1ea5b9e4a4678d6ee70c8', 'Distributor', '', '', 2, 1, 0, '2020-03-31 11:38:20', 'Jnt.kK2nXB15jhVkCEGLA3NssidZWLpsdgmt4bx8GkTZL5', '');
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
